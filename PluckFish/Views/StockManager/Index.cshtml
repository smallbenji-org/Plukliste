@model PluckFish.Controllers.StockViewModel;
@{
    ViewData["Title"] = "Lagersystem";
}

<div class="card">
    <div class="row2" style="margin-bottom: 1rem;">
        <div class="form-group search-container wide">
            <form id="searchForm" method="post" asp-action="GetStockTable">
                <input type="text" name="searchText" id="searchBox" class="form-control" placeholder="Søg Varer...">
            </form>
            <div class="search-icon">
                <svg data-slot="icon" fill="none" stroke-width="1.5" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
                </svg>
            </div>
        </div>
    </div>

    <div class="area">
        @{
            var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
            var filter = Model.filter;
        }

        <div class="sort-options">
            <form asp-action="Index" data-filter="All">
                <button type="submit" class="sort-btn @(filter == "All" ? "active" : "")">Alle Varer</button>
            </form>
            <form asp-action="VisRestVare" data-filter="VisRestVare">
                <button type="submit" class="sort-btn @(filter == "VisRestVare" ? "active" : "")">Vis kun rest vare</button>
            </form>
            <form asp-action="VisVare" data-filter="VisVare">
                <button type="submit" class="sort-btn @(filter == "VisVare" ? "active" : "")">Vis kun ikke rest vare</button>
            </form>
        </div>
    </div>
    <div class="controls-container">
        <form asp-action="ItemsImport" enctype="multipart/form-data" method="post" id="uploadForm">
            <label for="fileInput" class="create-btn card-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
                Importer varer
            </label>
            <input type="file" id="fileInput" name="file" required class="hidden" accept=".json,.csv,.xml" />
        </form>
        <form asp-action="ExportPickingList" method="post" style="display: inline;">
            <input type="hidden" name="filter" value="@Model.filter" />
            <input type="hidden" name="searchText" id="exportSearchText" />
            <select class="action-btn btn-eksport" id="eksportList" name="formatType">
                <option value="" selected disabled>-- Vælg en eksport format --</option>
                <option value=".json">JSON</option>
                <option value=".csv">CSV</option>
                <option value=".xml">XML</option>
            </select>
        </form>
    </div>
    <div id="stock-table-container">
        @await Html.PartialAsync("_StockTablePartial", Model)
    </div>
</div>

<div class="card" id="tomForm">
    <h2>Rediger vare</h2>
    <p class="edit-placeholder">Vælg en vare fra listen for at redigere.</p>
</div>

<div class="card hidden" id="redigerForm">
    <h2 id="redigerTitel">Rediger vare ()</h2>
    <form class="edit-form" method="post" action="/StockManager/Result">
        <div class="form-group">
            <label for="vare-maengde">Vare mængde</label>
            <input type="number" id="vare-maengde" class="form-control" value="1" min="0">
        </div>
        <div class="form-group-inline">
            <input type="checkbox" id="rest-vare" class="form-checkbox">
            <label for="rest-vare">Rest vare</label>
        </div>
        <button type="submit" class="confirm-btn">Gem ændringer</button>
    </form>
</div>

<script>
     const redigerFormContainer = document.getElementById("redigerForm");
     const redigerForm = redigerFormContainer.querySelector("form");
     const redigerFormTitel = document.getElementById("redigerTitel");
     const tomForm = document.getElementById("tomForm");
     const tableContainer = document.getElementById("stock-table-container");
     const uploadForm = document.getElementById("uploadForm");
     const fileInput = document.getElementById("fileInput");

     function initializeEditButtons() {
         const editButtons = tableContainer.querySelectorAll(".edit-btn");
         editButtons.forEach(btn => {
             btn.addEventListener("click", () => {
                 const productId = btn.dataset.productid;
                 const amount = btn.dataset.amount;
                 const restVare = btn.dataset.restvare === "True";

                 redigerFormContainer.dataset.productId = productId;
                 document.getElementById("vare-maengde").value = amount;
                 document.getElementById("rest-vare").checked = restVare;

                 tomForm.classList.add("hidden");
                 redigerFormTitel.innerText = "Rediger vare (" + productId + ")";
                 redigerFormContainer.classList.remove("hidden");

                 redigerFormTitel.scrollIntoView({ behavior: 'smooth' });
             });
         });
     }

     async function loadTable(url) {
         try {
               const searchText = document.getElementById("searchBox").value;
              const response = await fetch(url + "&searchText=" + encodeURIComponent(searchText));
             const html = await response.text();
             tableContainer.innerHTML = html;
             initializeEditButtons();
             window.history.pushState({ path: url }, '', url.replace('GetStockTable', 'ScrollPage'));
         } catch (error) {
             console.error('Failed to load table content:', error);
         }
     }

     tableContainer.addEventListener("click", function (e) {
         if (e.target.closest('.pagination a')) {
             e.preventDefault();
             const link = e.target.closest('.pagination a');
             loadTable(link.href);
         }
     });

     document.querySelectorAll('.sort-options form').forEach(form => {
         form.addEventListener('submit', function (e) {
             e.preventDefault();
             const filter = this.dataset.filter;
             if (filter) {
                 const url = `@Url.Action("GetStockTable", "StockManager")?nextPage=1&filter=${filter}`;
                 loadTable(url);

                 document.querySelectorAll('.sort-btn').forEach(b => b.classList.remove('active'));
                 this.querySelector('.sort-btn').classList.add('active');
             } else {
                 this.submit();
             }
         });
     });

     redigerForm.addEventListener("submit", async (e) => {
         e.preventDefault();

         const productId = redigerFormContainer.dataset.productId;
         const formData = new FormData();
         formData.append("prodId", productId);
         formData.append("amount", document.getElementById("vare-maengde").value);
         formData.append("restVare", document.getElementById("rest-vare").checked);

         const response = await fetch(redigerForm.action, {
             method: redigerForm.method,
             body: formData
         });

         if (response.ok) {
             const currentFilter = document.querySelector('.sort-btn.active').closest('form').dataset.filter || 'All';
             const url = `@Url.Action("GetStockTable", "StockManager")?nextPage=1&filter=${currentFilter}`;
             loadTable(url);
         }
     });


    initializeEditButtons();

    document.getElementById("searchForm").addEventListener("submit", function (e) {
        e.preventDefault();
        const url = this.action + "?nextPage=1";
        loadTable(url);
    });

    fileInput.addEventListener("change", function () {
        if (this.value) {
            uploadForm.submit();
        }
    });

    uploadForm.addEventListener("dragover", (event) => {
        event.preventDefault();
        uploadForm.classList.add("drag-over");
    });

    uploadForm.addEventListener("dragleave", () => {
        uploadForm.classList.remove("drag-over");
    });

    uploadForm.addEventListener("drop", (event) => {
        event.preventDefault();
        uploadForm.classList.remove("drag-over");

        if (event.dataTransfer.files.length > 0) {
            fileInput.files = event.dataTransfer.files;
            const changeEvent = new Event('change', { bubbles: true });
            fileInput.dispatchEvent(changeEvent);
        }
    });

    document.getElementById("eksportList").addEventListener("change", function () {
        if (this.value) {
            document.getElementById("exportSearchText").value = document.getElementById("searchBox").value;
            this.form.submit();
        }
    });
</script>